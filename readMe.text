Work flow

1.유저가 nft를 강화함.

2.강화시 소요되는 per(erc20,kip7)은 일정비율대로 풀에 적립
(풀에 적립된 klay,per는 현재 EOA에 전송받는 중)

3.강화를 하게되면 해당 카드에 대한 mining power 정보를 db contract에 struct 에 data 저장.

4.풀에서 하루에 풀리는 물량은 (poolBalance / 365)
(변수처리해서 핸들링이 가능했으면 합니다)

5.staking contract에서 유저가 nft 토큰을 staking 
(db contract에서 해당 카드에 대한 정보를 받아와 mining power 를 불러옴)

6.하루에 풀리는 수량에서 유저들의 nft 마이닝파워에 따라 배분 됨.

7.유저는 stake 할수있는 nft가 다중,
(변수처리해서 stake가능한 max수량 핸들링이 가능했으면 합니다)

8.추후에 harvest() 혹은 exit() 해서  출금



의뢰하는 contract 작성은
Work flow의 4~8번까지 과정의 staking contract 입니다.


진행하면서 계속 애 먹었던 부분은
staking 에서 지급되어야하는 보상은 한정적(daliy rewards) 이고
유저들이 예치, 출금, 파기등의 동작 수행은 언제든지 자유롭게 이루어져야하는 상황 입니다.
또한, 정확한 보상 비율을 구하여 보상을 제공하여야 하기 때문에 일정 수식이나 패턴을 기대하여 계산할 수 없는 상황
따라서 유저가 예치, 출금, 파기등의 동작을 수행할때마다 유저의 정보를 토대로 총 보상정도 정보를 수정하였고 해당 동작까지는 잘 수행됨을 확인.
유저 보상 수령시 정확한 보상수령을 위해 초단위로 보상 변화량을 체크하여 보상을 지급하려 하였으나 solidity에서 loop문을 약 1만 회만 동작하기때문에 정확히 초단위로 계산하기 난항,
또한 예치, 출금등의 동작을 통해 변화량이 많은경우 변화량이 존재하는 경우에만 감지하여 값을 구한다고 하더라도 완벽하게 안전한 보상 지급이 불가능 합니다.

